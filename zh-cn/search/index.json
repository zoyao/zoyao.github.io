[{"content":"Hugo 是一个用 Go 编写的开源静态网站生成器，一般只需几秒钟就能生成一个网站，被称为“世界上最快的网站构建框架”。用户可以使用 markdown 语法编写博客内容，结合 Github Page 可以无需服务器部署自己的博客，同时也支持采用 Nginx 、Apache 等 HTTP 服务器的私有化部署方式。本文结合本博客的部署过程，详细叙述以上两种部署方式，以及 CI/CD 自动化部署、国际化配置等过程。\n英文站点 - Github Page 访问地址:\nzoyao.github.io\n中文站点 - Nginx 私有化部署访问地址:\nzoyao.top\nHugo 安装 hugo 本地安装，建议首次使用时在本地安装好 hugo 客户端，方便调试。后续使用过程中，可脱离 hugo 客户端使用，在本地编辑好 markdown 文件上传至 github，即可触发自动化部署，详见 Github Pages 自动化部署与私有化自动化部署章节\nhugo 安装\n安装过程 - 以 windows winget 为例，安装 Extended 版本\n1 2 3 4 5 //安装 winget install Hugo.Hugo.Extended //卸载 winget uninstall --name \u0026#34;Hugo (Extended)\u0026#34; 其它系统及安装方式，可查看 官方文档\n新建站点\n执行以下命令，即可在当前文件夹下新建站点 mysite\n1 hugo new site mysite 预览\n执行成功，可以在本地 1313 端口下，预览网站\n1 hugo server 打包\n打包完成，在 public 目录下生成静态网站\n1 hugo 环境配置\nhugo 在 config 文件夹下对环境配置文件进行管理(默认不存在该目录，需要用户自己新建)，目录结构如下所示\n1 2 3 4 5 6 7 mysite ├── config.toml └── config ├── development │ └── config.toml └── production └── config.toml 如上，新建了 development 与 production 环境配置，可以通过 --environment development 指定配置文件，若无指定，则\nhugo server 预览命令，默认使用 development 环境\nhugo 打包命令，默认使用 production 环境\n指定配置文件的启动命令：\n1 2 3 4 5 //预览 hugo server --environment development //打包 hugo --environment development 主题配置 得益于 hugo 丰富的主题库，我们可以简单快捷地获取到许多个性化 hugo 主题，可以预览 官网主题库 挑选自己喜欢的主题\n以下，将采用 hugo-theme-stack 主题为例进行说明\ngit 初始化\n1 2 3 4 5 //进入所在目录 cd mysite //git初始化 git init 添加子模块，方便后续主题更新\n1 2 //在 mysite/themes 目录下，拉取 hugo-theme-stack 并创建名为 stack 的主题 git submodule add https://github.com/CaiJimmy/hugo-theme-stack.git themes/stack 配置主题\n打开刚刚下载的主题文件，将 themes/stack/exampleSite 目录下的配置文件复制到根目录，覆盖原先的配置文件，编辑配置文件，将 theme 字段配置为上述步骤创建的主题名称，即 stack\nhugo-theme-stack 部分配置说明\n1 2 3 4 5 6 7 8 9 10 11 //访问url，页面跳转时用到 baseurl: https://example.com/ //主题名称，在此处应为 stack theme: hugo-theme-stack //网站名称 title: Example Site //网站说明 copyright: Example Person 配置完成重启即可看到主题改动\nhugo-theme-stack 其他配置可至 官网查询\nGithub Pages 自动化部署 CI/CD GitHub Pages 是 GitHub 提供的一个网页寄存服务，可以用于存放静态网页，包括博客、项目文档等，hugo 可以快速构建静态网站，天然支持使用 GitHub Pages 部署\nGitHub Pages 配置\n使用 Github Pages 需要创建一个以 Github 用户名开头，.github.io 结尾的 repository，并且必须为公开仓库。具体流程为：\nNew repository\nRepository name: xxxx(用户名).github.io\nPublic\nCreate repository\n创建完成，打开仓库的 Settings 配置，修改 Default branch 可以修改默认展示的分支。\n上传静态页面 index.html 文件至仓库指定分支\n1 2 3 4 5 6 7 8 9 10 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Hello World\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Hello World\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 打开 https://用户名.github.io/ 即可看到刚刚上传的静态页面。\n关联 Hugo 仓库自动化部署\n在这里，我们采用两个不同的 Github 仓库\nblog 仓库 \u0026ndash; 用来存放原始的博客文件，主要格式为 Mrakdown\nGitHub Pages 仓库 \u0026ndash; 即上一个步骤创建的仓库，用来存放打包后的静态网站\n具体流程如下：\n打通两个仓库的权限\n打开 Github 全局配置（非仓库配置）Settings / Settings / Personal access tokens / Fine-grained tokens / Generate new token\nToken name 可随意填写\nExpiration 过期时间建议选择 No expiration，避免过期后无法使用\nRepository access 安全考虑建议选择 Only select repositories，只选择刚刚创建的 GitHub Pages 仓库仓库\nPermissions 权限配置将 Contents 修改为 Read and write\n保存并复制好自动生成的 token\n在 blog 仓库增加 token 配置，路径为：blog 仓库 / Settings / Security / Secrets and variables / Actions / Repository secrets / New repository secret，Name 命名为 PERSONAL_TOKEN，并将上述步骤复制的 token 粘贴到 Secret 中保存\nhugo 自动打包、发布\n在 blog 仓库的 .github/workflows 目录下，创建deploy.yml，配置内容如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 name: deploy on: # git push时执行 action push: workflow_dispatch: schedule: # Runs everyday at 8:00 AM - cron: \u0026#34;0 0 * * *\u0026#34; jobs: build: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v2 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;latest\u0026#34; # hugo 打包 - name: Build Web run: hugo # 打包完成推送至指定仓库 - name: Deploy Web uses: peaceiris/actions-gh-pages@v3 with: PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }} EXTERNAL_REPOSITORY: zoyao/zoyao.github.io PUBLISH_BRANCH: master PUBLISH_DIR: ./public commit_message: ${{ github.event.head_commit.message }} 配置完成之后，当执行 git push 之后，即触发自动化部署，可在 blog 仓库的 action 中，看到相关流程\n私有化自动化部署 CI/CD 采用 GitHub Pages 可以很方便的完成自动化部署，但是 GitHub 域名在部分网络环境下访问较慢，如果有这部分需求的童鞋，可以采用私有化部署，部署到自己的服务器上。\n私有化部署\n这里采用 Nginx 进行私有化部署\n将打包后的博客静态文件复制到私有服务器，/app/blog/目录下\n配置 Nginx，在 Nginx 的 ./nginx/conf.d目录下，新建配置文件，这里命名为blog-8888.conf\n1 2 3 4 5 6 7 8 9 10 11 12 13 server { # 监听8888端口 listen 8888; # 这里先采用IP访问，后续 HTTPS 配置再修改为域名 server_name 服务器公网IP; # server_name www.zoyao.top; # 指定静态资源位置 location / { root /app/blog; index index.html index.htm; } } 更新 Nginx 配置之后，访问 http://服务器公网IP:8888/ 即可看到博客首页\n自动化部署\n使用自动化部署，需要先配置 ssh key 登录，建议先新建用户，做好权限隔离\n使用 adduser 命令创建新用户，这里命名为 git，可自定义\nsudo adduser git\n目录授权，需要将 /app/blog 授权给上一步骤新建的用户，切换到git用户执行\nsudo chmod -R 777 /app/blog\nHTTPS 配置 i18n国际化 ","date":"2025-06-03T00:00:00Z","image":"https://zoyao.github.io/hugo-logo-wide.svg","permalink":"https://zoyao.github.io/zh-cn/p/hugo-%E5%8D%9A%E5%AE%A2-github-page-/%E7%A7%81%E6%9C%89%E5%8C%96-%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97/","title":"Hugo 博客 Github Page /私有化 部署指南"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://zoyao.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu_e95a4276bf860a84.jpg","permalink":"https://zoyao.github.io/zh-cn/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"}]